{"version":3,"sources":["serviceWorker.ts","shared/utils.ts","MainPage/FileLoader/DropZone/DropZone.tsx","MainPage/FileLoader/NewFilePanel/NewFilePanel.tsx","MainPage/FileLoader/FileLoader.tsx","MainPage/Playbooks/PlaybookList/PlaybookList.tsx","shared/models/Task.ts","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/CodeField/CodeField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/TextField/TextField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/PlaybookField/PlaybookField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/FolderPathField/FolderPathField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/FilePathField/FilePathField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskField/TaskField.tsx","MainPage/Playbooks/PlaybookEditor/TaskEditor/TaskEditor.tsx","MainPage/Playbooks/PlaybookEditor/ParametersEditor/ParametersEditor.tsx","MainPage/Playbooks/PlaybookEditor/PlaybookEditor.tsx","MainPage/Playbooks/PlaybookHeader/PlaybookHeader.tsx","MainPage/Playbooks/Playbooks.tsx","MainPage/MainPage.tsx","index.tsx","shared/actions/playbooksActions.ts","shared/actions/tasksActions.ts","shared/store.ts","shared/reducers/playbooksReducer.ts","shared/reducers/tasksReducer.ts","shared/reducers/index.ts"],"names":["Boolean","window","location","hostname","match","bumpStyled","component","css","styled","DropZoneContainer","Paper","DropZoneView","div","CenterParagraph","p","DropZone","loadFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","quickoData","text","JSON","parse","playbooks","tasks","convertFileTextToStore","result","readAsText","useDropzone","getRootProps","getInputProps","id","name","description","parameters","NewFilePanelView","CreateButtonView","Button","NewFilePanel","useState","checkedItems","setCheckedItems","List","dense","role","map","value","labelId","ListItem","key","button","onClick","itemToToggle","newCheckedItems","includes","filter","item","handleToggle","ListItemIcon","Checkbox","checked","indexOf","tabIndex","disableRipple","inputProps","ListItemText","primary","variant","color","FileLoaderView","connect","dispatch","data","document","getElementById","style","display","TaskTypesKeys","FolderPathFieldTypes","FilePathFieldTypes","ViewList","state","Object","values","addPlaybook","selectedPlaybookId","setSelectedPlaybookId","playbook","selected","secondary","FIELD_TYPES","TASK_TYPES","CreateFile","label","fields","type","ExecuteCommand","ExecuteCodemod","ExecutePlaybook","TypescriptTransformationOnFile","CodeField","onChange","onValueChange","highlight","prism","languages","javascript","padding","backgroundColor","fontFamily","fontSize","TextField","autoComplete","event","target","getPlaybooksFromState","Select","MenuItem","ViewRadioGroup","RadioGroup","FolderPathField","folderPathValue","showPathTextField","Value","_","FormControlLabel","control","Radio","Root","UserInput","Typography","TaskField","FieldComponent","task","field","updateTaskFields","PlaybookField","FilePathField","Fragment","ViewExpansionPanelDetails","ExpansionPanelDetails","ViewDivider","Divider","props","taskId","taskType","updateTask","deleteTask","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","ExpansionPanelActions","size","ViewInput","input","ParametersEditor","variable","setVariable","error","setError","onSubmit","e","preventDefault","length","Chip","onDelete","index","newParameters","splice","handleDeleteVariable","placeholder","ViewPlaybookEditor","ViewTypography","ViewForm","ViewTextField","ViewButtonGroup","ButtonGroup","updatePlaybookFields","updatePlaybook","addTask","deletePlaybook","handleChange","multiline","rowsMax","fullWidth","PlaybookHeaderView","store","downloadFile","filename","element","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","keys","reduce","acc","stringify","convertStoreToFileText","EditionPageView","Playbooks","editorOpen","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message","UPDATE_PLAYBOOK","DELETE_PLAYBOOK","ADD_PLAYBOOK","LOAD_FILE","uuid","UPDATE_TASK","ADD_TASK","DELETE_TASK","playbookId","initialState","enhancer","composeWithDevTools","applyMiddleware","createStore","rootReducer","configureStore","module","hot","accept","replaceReducer","INITIAL_PLAYBOOKS","updateObjectFieldsById","object","deleteObjectById","action","INITIAL_TASKS","combineReducers"],"mappings":"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","file":"static/js/main.4e88eb54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\nimport { RootState } from './reducers';\n\nexport const bumpStyled = (component: any) => (css: TemplateStringsArray) =>\n  styled(component)`\n    && {\n      ${css}\n    }\n  `;\n\nexport const convertStoreToFileText = (store: RootState) => {\n    const text = Object.keys(store).reduce(\n      (acc: any, key: string) =>\n      // @ts-ignore next-line\n        ({...acc, [key]: JSON.stringify(store[key])}),\n      {}\n    );\n\n    return JSON.stringify(text)\n}\n\nexport const convertFileTextToStore = (text: string) => {\n  let quickoData = JSON.parse(text);\n  quickoData = {\n    playbooks: JSON.parse(quickoData.playbooks),\n    tasks: JSON.parse(quickoData.tasks),\n  };\n\n  return quickoData;\n}\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport {useDropzone} from 'react-dropzone'\nimport styled from 'styled-components';\nimport { Paper } from '@material-ui/core';\nimport { convertFileTextToStore } from '../../../shared/utils';\n\ntype DropZoneProps = {\n  loadFile: (content: any) => void;\n};\n\nconst DropZoneContainer = styled(Paper)`\n  width: 400px;\n  margin: 16px;\n`;\n\nconst DropZoneView = styled.div`\n  border: 2px dashed black;\n  border-radius: 5px;\n  height: calc(100% - 23px);\n  text-align: center;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n`;\n\nconst CenterParagraph = styled.p`\n  text-align: center;\n  width: 100%;\n`;\n\nconst DropZone: FunctionComponent<DropZoneProps> = ({\n  loadFile,\n}) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: any) => {\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n        // @ts-ignore next-line\n        const textContent: string = reader.result;\n        let quickoData = convertFileTextToStore(textContent);\n        loadFile(quickoData);\n      }\n      reader.readAsText(file)\n    })\n\n  }, [loadFile])\n\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n  return (\n    <DropZoneContainer>\n      <DropZoneView {...getRootProps()}>\n        <input {...getInputProps()} />\n        <CenterParagraph>Drag 'n' drop your quicko file here,<br></br>or click to upload it</CenterParagraph>\n      </DropZoneView>\n    </DropZoneContainer>\n  )\n}\n\nexport default DropZone;\n","import React, { FunctionComponent, useState } from 'react';\nimport { Paper, List, ListItem, ListItemText, ListItemIcon, Checkbox, Button } from '@material-ui/core';\nimport styled from 'styled-components';\n\n\nconst playbooks = {\n  \"477749ad-99f2-4aaf-bdd6-e39da2e568ae\": {\n    id: \"477749ad-99f2-4aaf-bdd6-e39da2e568ae\",\n    name: \"New playbook\",\n    description: \"\",\n    parameters: [],\n    tasks: [],\n  }\n}\n\ntype NewFilePanelProps = {\n  loadFile: (content: any) => void;\n};\n\nconst NewFilePanelView = styled(Paper)`\n  width: 400px;\n  margin: 16px;\n`;\n\nconst CreateButtonView = styled(Button)`\n  width: 100%;\n`;\n\nconst NewFilePanel: FunctionComponent<NewFilePanelProps> = ({\n  loadFile,\n}) => {\n  const items = ['Angular', 'ReactJS', 'Symfony', 'NestJS'];\n  const [checkedItems, setCheckedItems] = useState<string[]>([]);\n\n  const handleToggle = (itemToToggle: string) => {\n    const newCheckedItems = checkedItems.includes(itemToToggle) ?\n      [...checkedItems.filter(item => item !== itemToToggle)] :\n      [...checkedItems, itemToToggle];\n    setCheckedItems(newCheckedItems);\n  }\n\n  return (\n    <NewFilePanelView>\n      <List dense component=\"div\" role=\"list\">\n        {items.map(value => {\n          const labelId = `transfer-list-item-${value}-label`;\n\n          return (\n            <ListItem key={value} role=\"listitem\" button onClick={() => handleToggle(value)}>\n              <ListItemIcon>\n                <Checkbox\n                  checked={checkedItems.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={value} />\n            </ListItem>\n          );\n        })}\n        <ListItem />\n      </List>\n      <CreateButtonView variant=\"contained\" color=\"primary\" onClick={() => loadFile({tasks: {}, playbooks})}>Create new quicko file</CreateButtonView>\n    </NewFilePanelView>\n  )\n}\n\nexport default NewFilePanel;\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\nimport DropZone from './DropZone';\nimport NewFilePanel from './NewFilePanel';\nimport { Dispatch } from 'redux';\nimport { loadFile } from '../../shared/actions/playbooksActions';\nimport { connect } from 'react-redux';\n\nconst FileLoaderView = styled.div`\n  max-width: 850px;\n  display: flex;\n  margin: auto;\n  justify-content: space-between;\n`;\n\ntype FileLoaderProps = {\n  loadFile: (content: any) => void;\n};\n\nconst FileLoader: FunctionComponent<FileLoaderProps> = ({\n  loadFile,\n}) => {\n  return (\n    <FileLoaderView>\n      <DropZone loadFile={loadFile} />\n      <NewFilePanel loadFile={loadFile} />\n    </FileLoaderView>\n  );\n};\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  loadFile: (data: any) => {\n    // @ts-ignore next-line\n    document.getElementById('page-wrapper').style.display = \"none\";\n\n    return dispatch(loadFile(data))\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FileLoader);\n","import React, { FunctionComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { bumpStyled } from '../../../shared/utils';\nimport { PlaybookModel } from '../../../shared/models/Playbook';\nimport { RootState } from '../../../shared/reducers/index';\nimport { addPlaybook } from '../../../shared/actions/playbooksActions';\n\nconst ViewList = bumpStyled(List)`\n  height: 100%;\n  overflow: auto;\n  padding: 0;\n`;\n\ntype PlaybookListProps = {\n  playbooks: PlaybookModel[];\n  selectedPlaybookId: string;\n  setSelectedPlaybookId: (playbookId: string) => void;\n  addPlaybook: () => void;\n};\n\nconst PlaybookList: FunctionComponent<PlaybookListProps> = ({\n  playbooks,\n  selectedPlaybookId,\n  setSelectedPlaybookId,\n  addPlaybook,\n}) => {\n  return (\n    <ViewList component=\"nav\">\n      {playbooks.map(playbook => (\n        <ListItem\n          key={playbook.id}\n          button\n          selected={playbook.id === selectedPlaybookId}\n          onClick={() => setSelectedPlaybookId(playbook.id)}\n        >\n          { playbook.name ? <ListItemText primary={playbook.name} /> : <ListItemText secondary=\"UNNAMED\" />}\n        </ListItem>\n      ))}\n        <ListItem\n          button\n          onClick={addPlaybook}\n        >\n          <ListItemText primary=\"Add playbook\" />\n        </ListItem>\n    </ViewList>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  playbooks: Object.values(state.playbooks)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  addPlaybook: () => dispatch(addPlaybook()),\n});\n\n// @ts-ignore next-line\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaybookList);\n","export enum TaskTypesKeys {\n    CreateFile = \"CREATE_FILE\",\n    ExecuteCommand = \"EXECUTE_COMMAND\",\n    ExecutePlaybook = \"EXECUTE_PLAYBOOK\",\n    ExecuteCodemod = \"EXECUTE_CODEMOD\",\n    TypescriptTransformationOnFile = \"TYPESCRIPT_TRANSFORMATION_ON_FILE\",\n}\n\nexport enum FolderPathFieldTypes {\n    Root = \"ROOT\",\n    UserInput = \"USER_INPUT\",\n    Value = \"VALUE\",\n}\n\nexport enum FilePathFieldTypes {\n    UserInput = \"USER_INPUT\",\n    Value = \"VALUE\",\n}\n\nexport interface TaskModel {\n  [key: string]: any;\n}\n\nexport const FIELD_TYPES = {\n  TEXT: 'TEXT',\n  FOLDER_PATH: 'FOLDER_PATH',\n  FILE_PATH: 'FILE_PATH',\n  CODE: 'CODE',\n  PLAYBOOK: 'PLAYBOOK'\n};\n\nexport type FieldModel = {\n  name: string;\n  label: string;\n  type: string;\n};\n\ntype TaskTypeModel = {\n  key: string;\n  label: string;\n  fields: FieldModel[];\n};\n\ntype TaskTypesModel = {\n  [key: string]: TaskTypeModel;\n};\n\nexport const TASK_TYPES: TaskTypesModel = {\n  [TaskTypesKeys.CreateFile]: {\n    key: TaskTypesKeys.CreateFile,\n    label: 'File creation',\n    fields: [\n      { name: 'parentFolderPath', label: 'Parent folder path', type: FIELD_TYPES.FOLDER_PATH },\n      { name: 'fileName', label: 'File name', type: FIELD_TYPES.TEXT },\n      { name: 'fileContent', label: 'File content', type: FIELD_TYPES.CODE }\n    ]\n  },\n  [TaskTypesKeys.ExecuteCommand]: {\n    key: TaskTypesKeys.ExecuteCommand,\n    label: 'Command execution',\n    fields: [{ name: 'command', label: 'Command', type: FIELD_TYPES.CODE }]\n  },\n  [TaskTypesKeys.ExecuteCodemod]: {\n    key: TaskTypesKeys.ExecuteCodemod,\n    label: 'Codemod execution',\n    fields: [{ name: 'codemod', label: 'Codemod', type: FIELD_TYPES.CODE }]\n  },\n  [TaskTypesKeys.ExecutePlaybook]: {\n    key: TaskTypesKeys.ExecutePlaybook,\n    label: 'Playbook execution',\n    fields: [{ name: 'playbookId', label: 'Playbook', type: FIELD_TYPES.PLAYBOOK }]\n  },\n  [TaskTypesKeys.TypescriptTransformationOnFile]: {\n    key: TaskTypesKeys.TypescriptTransformationOnFile,\n    label: 'Typescript ts-morph transformation on file',\n    fields: [\n      { name: 'filePath', label: 'File to edit', type: FIELD_TYPES.FILE_PATH },\n      { name: 'transformationCode', label: 'Ts-morph transformation code', type: FIELD_TYPES.CODE }\n    ]\n  }\n};\n\nexport interface TasksState {\n  [id: string]: TaskModel;\n}\n","import React, { Fragment, FunctionComponent } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport prism from 'prismjs';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/themes/prism.css';\n\ntype CodeFieldProps = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nconst CodeField: FunctionComponent<CodeFieldProps> = ({ value = '', onChange }) => {\n  return (\n    <Fragment>\n      <Editor\n        value={value}\n        onValueChange={value => onChange(value)}\n        highlight={value => prism.highlight(value, prism.languages.javascript, 'javascript')}\n        padding={10}\n        style={{\n          backgroundColor: 'rgb(250, 250, 250)',\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default CodeField;\n","import React, { FunctionComponent } from 'react';\nimport { default as MaterialTextField } from '@material-ui/core/TextField';\n\ntype TextFieldProps = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nconst TextField: FunctionComponent<TextFieldProps> = ({ value = '', onChange }) => {\n  return (\n    <MaterialTextField\n      autoComplete=\"off\"\n      value={value}\n      onChange={event => onChange(event.target.value)}\n    />\n  );\n};\n\nexport default TextField;\n","import React, { FunctionComponent } from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { RootState } from '../../../../../../shared/reducers';\nimport { connect } from 'react-redux';\nimport { PlaybookModel } from '../../../../../../shared/models/Playbook';\n\ntype PlaybookFieldProps = {\n  playbooks: PlaybookModel[];\n  value: string;\n  onChange: (value: string) => void;\n};\n\nconst PlaybookField: FunctionComponent<PlaybookFieldProps> = ({\n  playbooks,\n  value = '',\n  onChange\n}) => {\n  return (\n    <Select value={value} onChange={(event: any) => onChange(event.target.value)}>\n      {playbooks.map(playbook => (\n        <MenuItem key={playbook.id} value={playbook.id}>\n          {playbook.name}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nconst getPlaybooksFromState = (state: RootState) =>\nObject.values(state.playbooks)\n\n\nconst mapStateToProps = (state: RootState) => ({\n  playbooks: getPlaybooksFromState(state),\n});\n\n// @ts-ignore next-line\nexport default connect(mapStateToProps)(PlaybookField);\n","import React, { Fragment, FunctionComponent } from 'react';\nimport { default as MaterialTextField } from '@material-ui/core/TextField';\nimport { default as FormControlLabel } from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Typography from '@material-ui/core/Typography';\nimport { bumpStyled } from '../../../../../../shared/utils';\nimport { FolderPathFieldTypes } from '../../../../../../shared/models/Task';\n\n\ntype FolderPathFieldProps = {\n  value: any;\n  onChange: (value: any) => void;\n};\n\nconst ViewRadioGroup = bumpStyled(RadioGroup)`\n  flex-direction: row;\n`;\n\nconst FolderPathField: FunctionComponent<FolderPathFieldProps> =\n  ({ value: folderPathValue = { type: null }, onChange }) => {\n    const { type, value } = folderPathValue;\n    const showPathTextField = type === FolderPathFieldTypes.Value;\n\n    return (<Fragment>\n      <ViewRadioGroup onChange={(_: any, value: any) => onChange({type: value})}>\n        <FormControlLabel\n          control={<Radio />}\n          label=\"Root\"\n          value={FolderPathFieldTypes.Root}\n        />\n        <FormControlLabel\n          control={<Radio />}\n          label=\"From user input\"\n          value={FolderPathFieldTypes.UserInput}\n        />\n        <FormControlLabel\n          control={<Radio />}\n          label=\"At specific location\"\n          value={FolderPathFieldTypes.Value}\n        />\n      </ViewRadioGroup>\n      { showPathTextField && <Fragment>\n          <Typography>File location</Typography>\n          <MaterialTextField\n            autoComplete=\"off\"\n            value={value}\n            onChange={event => onChange({type: FolderPathFieldTypes.Value, value: event.target.value})}\n          />\n        </Fragment>\n      }\n      </Fragment>\n    );\n  };\n\nexport default FolderPathField;\n","import React, { Fragment, FunctionComponent } from 'react';\nimport { default as MaterialTextField } from '@material-ui/core/TextField';\nimport { default as FormControlLabel } from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Typography from '@material-ui/core/Typography';\nimport { bumpStyled } from '../../../../../../shared/utils';\nimport { FilePathFieldTypes } from '../../../../../../shared/models/Task';\n\n\ntype FolderPathFieldProps = {\n  value: any;\n  onChange: (value: any) => void;\n};\n\nconst ViewRadioGroup = bumpStyled(RadioGroup)`\n  flex-direction: row;\n`;\n\nconst FolderPathField: FunctionComponent<FolderPathFieldProps> =\n  ({ value: folderPathValue = { type: null }, onChange }) => {\n    const { type, value } = folderPathValue;\n    const showPathTextField = type === FilePathFieldTypes.Value;\n\n    return (<Fragment>\n      <ViewRadioGroup onChange={(_: any, value: any) => onChange({type: value})}>\n        <FormControlLabel\n          control={<Radio />}\n          label=\"From user input\"\n          value={FilePathFieldTypes.UserInput}\n        />\n        <FormControlLabel\n          control={<Radio />}\n          label=\"At specific location\"\n          value={FilePathFieldTypes.Value}\n        />\n      </ViewRadioGroup>\n      { showPathTextField && <Fragment>\n          <Typography>File location</Typography>\n          <MaterialTextField\n            autoComplete=\"off\"\n            value={value}\n            onChange={event => onChange({type: FilePathFieldTypes.Value, value: event.target.value})}\n          />\n        </Fragment>\n      }\n      </Fragment>\n    );\n  };\n\nexport default FolderPathField;\n","import React, { Fragment } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport { TaskModel, FieldModel, FIELD_TYPES } from '../../../../../shared/models/Task';\n\nimport CodeField from './CodeField';\nimport TextField from './TextField';\nimport PlaybookField from './PlaybookField';\nimport FolderPathField from './FolderPathField';\nimport FilePathField from './FilePathField';\n\ntype TaskFieldProps = {\n  task: TaskModel;\n  field: FieldModel;\n  updateTaskFields: (fields: any) => void;\n};\n\nconst TaskField = ({ task, field, updateTaskFields }: TaskFieldProps) => {\n  const { name, type, label } = field;\n  const value = task[name];\n\n  let FieldComponent: any;\n  switch (type) {\n    case FIELD_TYPES.CODE:\n      FieldComponent = CodeField;\n      break;\n    case FIELD_TYPES.TEXT:\n      FieldComponent = TextField;\n      break;\n    case FIELD_TYPES.PLAYBOOK:\n      FieldComponent = PlaybookField;\n      break;\n    case FIELD_TYPES.FOLDER_PATH:\n      FieldComponent = FolderPathField;\n      break;\n    case FIELD_TYPES.FILE_PATH:\n      FieldComponent = FilePathField;\n      break;\n    default:\n      FieldComponent = Fragment;\n      break;\n  }\n\n  return (\n    <Fragment>\n      <Typography>{label}</Typography>\n      <FieldComponent\n        value={value}\n        onChange={(value: string) => updateTaskFields({ [name]: value })}\n      />\n    </Fragment>\n  );\n};\n\nexport default TaskField;\n","import React, { FunctionComponent } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n\nimport { bumpStyled } from '../../../../shared/utils';\nimport { updateTask } from '../../../../shared/actions/tasksActions';\nimport TaskField from './TaskField';\nimport { TaskModel, TASK_TYPES } from '../../../../shared/models/Task';\nimport { RootState } from '../../../../shared/reducers';\n\nconst ViewExpansionPanelDetails = bumpStyled(ExpansionPanelDetails)`\n  flex-direction: column;\n`;\n\nconst ViewDivider = bumpStyled(Divider)`\n  position: static\n`;\n\ntype TaskEditorProps = {\n  task: TaskModel;\n  taskType: any;\n  updateTaskFields: (fields: any) => void;\n  deleteTask: (id: string) => void;\n};\n\n\n\nconst TaskEditor: FunctionComponent<TaskEditorProps> = ({\n  task,\n  taskType,\n  updateTaskFields,\n  deleteTask\n}) => {\n  const { id } = task;\n\n  return (\n    <ExpansionPanel defaultExpanded={true}>\n      <ExpansionPanelSummary>\n        <Typography>{taskType.label}</Typography>\n      </ExpansionPanelSummary>\n      <ViewDivider />\n      <ViewExpansionPanelDetails>\n        {taskType.fields.map((field: any) => (\n          <TaskField\n            key={field.name}\n            task={task}\n            field={field}\n            updateTaskFields={updateTaskFields}\n          />\n        ))}\n      </ViewExpansionPanelDetails>\n      <ViewDivider />\n      <ExpansionPanelActions>\n        <Button size=\"small\" onClick={() => deleteTask(id)}>\n          Delete\n        </Button>\n      </ExpansionPanelActions>\n    </ExpansionPanel>\n  );\n};\n\ntype TaskEditorContainerProps = {\n  taskId: string;\n};\nconst mapStateToProps = (state: RootState, props: TaskEditorContainerProps) => {\n  const task = state.tasks[props.taskId];\n\n  return {\n    task,\n    taskType: TASK_TYPES[task.type]\n  };\n};\nconst mapDispatchToProps = (dispatch: Dispatch, props: TaskEditorContainerProps) => ({\n  updateTaskFields: (fields: any) => dispatch(updateTask(props.taskId, fields))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskEditor);\n","import React, { FunctionComponent, useState, FormEvent } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport styled from 'styled-components';\n\ntype ParametersEditorProps = {\n  parameters: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst ViewInput = styled.input`\n  && {\n    width: 200px;\n  }\n`\n\nconst ParametersEditor: FunctionComponent<ParametersEditorProps> = ({ parameters = [], onChange }) => {\n  const [variable, setVariable] = useState('');\n  const [error, setError] = useState('');\n\n  const handleVariableSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (parameters.includes(variable)) {\n      setError('Variable already exists');\n      return;\n    }\n    if (variable.length === 0) {\n      setError('Variable is empty');\n      return;\n    }\n    onChange([...parameters, variable]);\n    setVariable('');\n    setError('');\n  };\n\n  const handleDeleteVariable = (variable: string) => {\n    const index = parameters.indexOf(variable);\n    const newParameters = [...parameters];\n    newParameters.splice(index, 1);\n    onChange(newParameters);\n  };\n\n  return (\n    <form onSubmit={handleVariableSubmit}>\n      {parameters.map(variable => (\n        <Chip key={variable} label={variable} onDelete={() => handleDeleteVariable(variable)} />\n      ))}\n      <ViewInput\n        autoComplete=\"off\"\n        value={variable}\n        type=\"text\"\n        placeholder=\"Add variable\"\n        id=\"description\"\n        onChange={e => setVariable(e.target.value)}\n      />\n      {error}\n    </form>\n  );\n};\n\nexport default ParametersEditor;\n","import React, { FunctionComponent } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport { bumpStyled } from '../../../shared/utils';\nimport { TASK_TYPES } from '../../../shared/models/Task';\nimport { addTask, deleteTask } from '../../../shared/actions/tasksActions';\nimport { updatePlaybook, deletePlaybook } from '../../../shared/actions/playbooksActions';\nimport { PlaybookModel } from '../../../shared/models/Playbook';\nimport { RootState } from '../../../shared/reducers';\n\nimport TaskEditor from './TaskEditor';\nimport ParametersEditor from './ParametersEditor';\n\nconst ViewPlaybookEditor = styled.div`\n  display: flex;\n  height: 100%;\n  flex: auto;\n`;\n\nconst ViewTypography = bumpStyled(Typography)`\n  margin: auto;\n  text-align: center;\n`;\n\nconst ViewForm = styled.div`\n  display: block;\n  flex: 1;\n  margin: 1em;\n  text-align: left;\n`;\n\nconst ViewTextField = bumpStyled(TextField)`\n  margin: 1em;\n  display: block;\n`;\n\nconst ViewButtonGroup = bumpStyled(ButtonGroup)`\n  margin: 1em;\n`;\n\ntype PlaybookEditorProps = {\n  playbook: PlaybookModel;\n  updatePlaybookFields: (fields: any) => void;\n  addTask: (fields: any) => void;\n  deleteTask: (fields: any) => void;\n  deletePlaybook: () => void;\n};\n\nconst PlaybookEditor: FunctionComponent<PlaybookEditorProps> = ({\n  playbook,\n  updatePlaybookFields,\n  addTask,\n  deleteTask,\n  deletePlaybook,\n}) => {\n  const handleChange = (name: string) => (event: any) => {\n    updatePlaybookFields({ [name]: event.target.value });\n  };\n\n  if (!playbook) {\n    return (\n      <ViewPlaybookEditor>\n        <ViewTypography>Select a playbook to edit, or create a new one.</ViewTypography>\n      </ViewPlaybookEditor>\n    );\n  }\n\n  const { name = '', description = '', parameters = [], tasks = [] } = playbook;\n\n  return (\n    <ViewPlaybookEditor>\n      <ViewForm>\n        <ViewTextField\n          autoComplete=\"off\"\n          value={name}\n          label=\"Name\"\n          id=\"name\"\n          onChange={handleChange('name')}\n        />\n        <ViewTextField\n          autoComplete=\"off\"\n          value={description}\n          label=\"Description\"\n          multiline\n          rowsMax=\"4\"\n          id=\"description\"\n          onChange={handleChange('description')}\n        />\n        <ParametersEditor\n          onChange={parameters => updatePlaybookFields({ parameters })}\n          parameters={parameters}\n        />\n        {tasks.map(taskId => (\n          <TaskEditor key={taskId} taskId={taskId} deleteTask={deleteTask} />\n        ))}\n        <ViewButtonGroup color=\"primary\" variant=\"contained\" fullWidth>\n          {Object.values(TASK_TYPES).map(({ key, label }) => (\n            <Button onClick={() => addTask(key)} key={key}>\n              Add {label}\n            </Button>\n          ))}\n        </ViewButtonGroup>\n        <Button onClick={deletePlaybook}>\n          Delete playbook\n        </Button>\n      </ViewForm>\n    </ViewPlaybookEditor>\n  );\n};\n\ntype PlaybookEditorContainerProps = {\n  selectedPlaybookId: string;\n};\n\nconst mapStateToProps = (state: RootState, props: PlaybookEditorContainerProps) => ({\n  playbook: state.playbooks[props.selectedPlaybookId]\n});\nconst mapDispatchToProps = (dispatch: Dispatch, props: PlaybookEditorContainerProps) => ({\n  updatePlaybookFields: (fields: any) => dispatch(updatePlaybook(props.selectedPlaybookId, fields)),\n  addTask: (type: string) => dispatch(addTask(props.selectedPlaybookId, type)),\n  deleteTask: (id: string) => dispatch(deleteTask(props.selectedPlaybookId, id)),\n  deletePlaybook: () => dispatch(deletePlaybook(props.selectedPlaybookId)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlaybookEditor);\n","import React, { FunctionComponent } from 'react';\nimport { Paper, Button } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { bumpStyled, convertStoreToFileText } from '../../../shared/utils';\nimport { RootState } from '../../../shared/reducers';\nimport { connect } from 'react-redux';\n\ntype PlaybookHeaderProps = {\n  store: RootState;\n};\n\nconst PlaybookHeaderView = styled(Paper)`\n  width: 100%;\n  text-align: right;\n`;\n\nconst CreateButtonView = bumpStyled(Button)`\n  margin: 8px;\n`;\n\nconst download = (filename: string, text: string) => {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nconst PlaybookHeader: FunctionComponent<PlaybookHeaderProps> = ({\n  store,\n}) => {\n  const downloadFile = () => {\n    const text = convertStoreToFileText(store);\n    download('quicko.json', text);\n  };\n\n  return (\n    <PlaybookHeaderView>\n      <CreateButtonView variant=\"contained\" color=\"primary\" onClick={() => downloadFile()}>Download quicko file</CreateButtonView>\n    </PlaybookHeaderView>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  store: state,\n});\n\n// @ts-ignore next-line\nexport default connect(mapStateToProps)(PlaybookHeader);\n","import React, { useState, FunctionComponent, Fragment } from 'react';\nimport styled from 'styled-components';\n\nimport PlaybookList from './PlaybookList';\nimport PlaybookEditor from './PlaybookEditor';\nimport PlaybookHeader from './PlaybookHeader';\n\nconst EditionPageView = styled.div`\n  height: 100%;\n  display: flex;\n`;\n\nconst Playbooks: FunctionComponent = () => {\n  const [selectedPlaybookId, setSelectedPlaybookId] = useState();\n\n  return (\n    <Fragment>\n      <PlaybookHeader />\n      <EditionPageView>\n        <PlaybookList\n          selectedPlaybookId={selectedPlaybookId}\n          setSelectedPlaybookId={setSelectedPlaybookId}\n        />\n        <PlaybookEditor selectedPlaybookId={selectedPlaybookId} />\n      </EditionPageView>\n    </Fragment>\n  );\n};\n\nexport default Playbooks;\n","import React, { FunctionComponent } from 'react';\nimport Playbooks from './Playbooks';\nimport { RootState } from '../shared/reducers';\nimport { connect } from 'react-redux';\n\nconst MainPage: FunctionComponent<any> = (props) => {\n\n  return props.editorOpen ?\n    (<Playbooks />) : (null);\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  editorOpen: Object.keys(state.playbooks).length\n});\n\nexport default connect(\n  mapStateToProps,\n)(MainPage);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './shared/store';\nimport FileLoader from './MainPage/FileLoader';\nimport MainPage from './MainPage';\n\nReactDOM.render(\n  <Provider store={store}>\n    <FileLoader />\n  </Provider>, document.getElementById('file-loader'));\n\nReactDOM.render(\n  <Provider store={store}>\n    <MainPage />\n  </Provider>, document.getElementById('editor'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { PlaybookModel } from '../models/Playbook';\nimport { TaskModel } from '../models/Task';\nimport { Action, ActionCreator } from 'redux';\nimport { v4 as uuid } from 'uuid';\n\nexport const UPDATE_PLAYBOOK = 'UPDATE_PLAYBOOK';\nexport const DELETE_PLAYBOOK = 'DELETE_PLAYBOOK';\nexport const ADD_PLAYBOOK = 'ADD_PLAYBOOK';\nexport const LOAD_FILE = 'LOAD_FILE';\n\nexport interface UpdatePlaybookAction extends Action {\n  type: 'UPDATE_PLAYBOOK';\n  id: string;\n  fields: any;\n}\nexport interface DeletePlaybookAction extends Action {\n  type: 'DELETE_PLAYBOOK';\n  id: string;\n}\n\nexport interface AddPlaybookAction extends Action {\n  type: 'ADD_PLAYBOOK';\n  playbook: PlaybookModel;\n}\n\nexport interface LoadFileAction extends Action {\n  type: 'LOAD_FILE';\n  playbooks: PlaybookModel[];\n  tasks: TaskModel[];\n}\n\nexport const updatePlaybook: ActionCreator<UpdatePlaybookAction> = (id, fields) => ({\n  type: UPDATE_PLAYBOOK,\n  id,\n  fields\n});\n\nexport const addPlaybook: ActionCreator<AddPlaybookAction> = () => {\n  const playbook = {\n    id: uuid(),\n    name: '',\n    description: '',\n    parameters: [],\n    tasks: [],\n  };\n\n  return {\n    type: ADD_PLAYBOOK,\n    playbook,\n  };\n};\n\nexport const deletePlaybook: ActionCreator<DeletePlaybookAction> = id => ({\n  type: DELETE_PLAYBOOK,\n  id\n});\n\nexport const loadFile: ActionCreator<LoadFileAction> = ({playbooks, tasks}) => ({\n  type: LOAD_FILE,\n  playbooks,\n  tasks,\n});\n\nexport type PlaybooksAction = UpdatePlaybookAction | DeletePlaybookAction | AddPlaybookAction | LoadFileAction;\n","import { Action, ActionCreator } from 'redux';\nimport { v4 as uuid } from 'uuid';\n\nexport const UPDATE_TASK = 'UPDATE_TASK';\nexport const ADD_TASK = 'ADD_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\n\nexport interface UpdateTaskAction extends Action {\n  type: 'UPDATE_TASK';\n  id: string;\n  fields: any;\n}\nexport interface AddTaskAction extends Action {\n  type: 'ADD_TASK';\n  task: any;\n  playbookId: string;\n}\nexport interface DeleteTaskAction extends Action {\n  type: 'DELETE_TASK';\n  playbookId: string;\n  id: string;\n}\n\nexport const updateTask: ActionCreator<UpdateTaskAction> = (id, fields) => ({\n  type: UPDATE_TASK,\n  id,\n  fields\n});\nexport const addTask: ActionCreator<AddTaskAction> = (playbookId, type) => {\n  const task = {\n    id: uuid(),\n    type\n  };\n\n  return {\n    type: ADD_TASK,\n    task,\n    playbookId\n  };\n};\nexport const deleteTask: ActionCreator<DeleteTaskAction> = (playbookId, id) => ({\n  type: DELETE_TASK,\n  playbookId,\n  id\n});\n\nexport type TasksAction = UpdateTaskAction | AddTaskAction | DeleteTaskAction;\n","import { applyMiddleware, createStore, Store, DeepPartial } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer, { RootState } from './reducers';\n\nconst configureStore = (initialState?: DeepPartial<RootState>): Store<RootState | undefined> => {\n  const middlewares: any[] = [];\n  const enhancer = composeWithDevTools(applyMiddleware(...middlewares));\n  // @ts-ignore next-line\n  return createStore(rootReducer, initialState, enhancer);\n};\n\nconst store = configureStore();\n\n// @ts-ignore next-line\nif (typeof module.hot !== 'undefined') {\n  // @ts-ignore next-line\n  module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n}\n\nexport default store;\n","import { ADD_PLAYBOOK, DELETE_PLAYBOOK, UPDATE_PLAYBOOK, LOAD_FILE, PlaybooksAction } from './../actions/playbooksActions';\nimport { ADD_TASK, DELETE_TASK, TasksAction } from '../actions/tasksActions';\nimport { PlaybooksState } from '../models/Playbook';\n\nconst INITIAL_PLAYBOOKS: PlaybooksState = {};\n\nconst updateObjectFieldsById = (state: PlaybooksState, id: string, fields: any) => {\n  const object = {\n    ...state[id],\n    ...fields\n  };\n  return { ...state, [id]: object };\n};\n\nconst deleteObjectById = (state: PlaybooksState, id: string) => {\n  const { [id]: _, ...newState } = state;\n  return newState;\n};\n\nconst playbooks = (state = INITIAL_PLAYBOOKS, action: PlaybooksAction | TasksAction) => {\n  switch (action.type) {\n    case ADD_PLAYBOOK:\n      return { ...state, [action.playbook.id]: action.playbook };\n    case UPDATE_PLAYBOOK: {\n      const { id, fields } = action;\n\n      return updateObjectFieldsById(state, id, fields);\n    }\n    case ADD_TASK: {\n      const { playbookId } = action;\n      const playbook = state[playbookId];\n      const { tasks = [] } = playbook;\n      const fields = {\n        tasks: [...tasks, action.task.id]\n      };\n\n      return updateObjectFieldsById(state, playbookId, fields);\n    }\n    case DELETE_PLAYBOOK:\n      return deleteObjectById(state, action.id);\n    case LOAD_FILE:\n      return action.playbooks;\n    case DELETE_TASK:\n      const { id, playbookId } = action;\n      const playbook = state[playbookId];\n      const tasks = playbook.tasks.filter((taskId: string) => id !== taskId);\n      const fields = {\n        tasks\n      };\n\n      return updateObjectFieldsById(state, playbookId, fields);\n    default:\n      return state;\n  }\n};\n\nexport default playbooks;\n","import { ADD_TASK, UPDATE_TASK, DELETE_TASK, TasksAction } from '../actions/tasksActions';\nimport { TaskModel } from '../models/Task';\nimport { LOAD_FILE, PlaybooksAction } from '../actions/playbooksActions';\n\nexport interface TasksState {\n  [id: string]: TaskModel;\n}\n\nconst updateObjectFieldsById = (state: TasksState, id: string, fields: any) => {\n  const object = {\n    ...state[id],\n    ...fields\n  };\n  return { ...state, [id]: object };\n};\n\nconst deleteObjectById = (state: TasksState, id: string) => {\n  const { [id]: _, ...newState } = state;\n  return newState;\n};\n\nconst INITIAL_TASKS: TasksState = {};\n\nconst tasks = (state = INITIAL_TASKS, action: TasksAction | PlaybooksAction) => {\n  switch (action.type) {\n    case UPDATE_TASK: {\n      const { id, fields } = action;\n\n      return updateObjectFieldsById(state, id, fields);\n    }\n    case ADD_TASK:\n      return { ...state, [action.task.id]: action.task };\n    case DELETE_TASK:\n      return deleteObjectById(state, action.id);\n    case LOAD_FILE:\n      return action.tasks;\n    default:\n      return state;\n  }\n};\n\nexport default tasks;\n","import { PlaybooksState } from '../models/Playbook';\nimport { TasksState } from '../models/Task';\nimport { combineReducers } from 'redux';\nimport playbooks from './playbooksReducer';\nimport tasks from './tasksReducer';\n\nexport interface RootState {\n  playbooks: PlaybooksState;\n  tasks: TasksState;\n}\n\nexport default combineReducers({\n  playbooks,\n  tasks\n});\n"],"sourceRoot":""}